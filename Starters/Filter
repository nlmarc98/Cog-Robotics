package nl.ru.ai.marc;

public class Filter {
	private static final int NUMBER_OF_SAMPLES = 100;
	public SampleRetrieval sample;

	public Filter(SampleRetrieval s) {
		this.sample = s;
	}

	public float redValue() {
		// Get the average of 100 redSample values and return it to the caller
		float sum = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
			sum += sample.redSample()[0];
		}
		return sum / NUMBER_OF_SAMPLES;
	}

	public float rgbValue() {
		// Get the average of 100 rgbSample values and return it to the caller
		float sum = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
			sum += sample.rgbSample()[0];
		}
		return sum / NUMBER_OF_SAMPLES;
	}

	public float distanceValue() {
		// Get the average of 100 distanceSample values and return it to the caller
		float sum = 0;
		for (int i = 0; i < NUMBER_OF_SAMPLES; i++) {
			sum += sample.distanceSample()[0];
		}
		return sum / NUMBER_OF_SAMPLES;
	}
}
